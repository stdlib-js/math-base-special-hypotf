{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isInfinitef = require( '@stdlib/math-base-assert-is-infinitef' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar sqrtf = require( '@stdlib/math-base-special-sqrtf' );\n\n\n// MAIN //\n\n/**\n* Computes the hypotenuse avoiding overflow and underflow (single-precision).\n*\n* @param {number} x - number\n* @param {number} y - number\n* @returns {number} hypotenuse\n*\n* @example\n* var h = hypotf( -5.0, 12.0 );\n* // returns 13.0\n*\n* @example\n* var h = hypotf( NaN, 12.0 );\n* // returns NaN\n*\n* @example\n* var h = hypotf( -0.0, -0.0 );\n* // returns 0.0\n*/\nfunction hypotf( x, y ) {\n\tvar tmp;\n\n\t// If one of the arguments is `+-infinity`, return `+infinity` even if the other argument is `NaN` (IEEE 754-2019)...\n\tif ( isInfinitef( x ) || isInfinitef( y ) ) {\n\t\treturn PINF;\n\t}\n\tif ( isnanf( x ) || isnanf( y ) ) {\n\t\treturn NaN;\n\t}\n\tx = float64ToFloat32( x );\n\ty = float64ToFloat32( y );\n\tif ( x < 0.0 ) {\n\t\tx = -x;\n\t}\n\tif ( y < 0.0 ) {\n\t\ty = -y;\n\t}\n\tif ( x < y ) {\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ty = float64ToFloat32( y / x );\n\treturn float64ToFloat32( x * sqrtf( float64ToFloat32( 1.0 + float64ToFloat32(y*y) ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = hypotf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the hypotenuse avoiding overflow and underflow (single-precision).\n*\n* @module @stdlib/math-base-special-hypotf\n*\n* @example\n* var hypotf = require( '@stdlib/math-base-special-hypotf' );\n*\n* var h = hypotf( -5.0, 12.0 );\n* // returns 13.0\n*\n* h = hypotf( NaN, 12.0 );\n* // returns NaN\n*\n* h = hypotf( -0.0, -0.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EACrEC,EAAS,QAAS,kCAAmC,EACrDC,EAAc,QAAS,uCAAwC,EAC/DC,EAAO,QAAS,gCAAiC,EACjDC,EAAQ,QAAS,iCAAkC,EAwBvD,SAASC,EAAQC,EAAGC,EAAI,CACvB,IAAIC,EAGJ,OAAKN,EAAaI,CAAE,GAAKJ,EAAaK,CAAE,EAChCJ,EAEHF,EAAQK,CAAE,GAAKL,EAAQM,CAAE,EACtB,KAERD,EAAIN,EAAkBM,CAAE,EACxBC,EAAIP,EAAkBO,CAAE,EACnBD,EAAI,IACRA,EAAI,CAACA,GAEDC,EAAI,IACRA,EAAI,CAACA,GAEDD,EAAIC,IACRC,EAAMD,EACNA,EAAID,EACJA,EAAIE,GAEAF,IAAM,EACH,GAERC,EAAIP,EAAkBO,EAAID,CAAE,EACrBN,EAAkBM,EAAIF,EAAOJ,EAAkB,EAAMA,EAAiBO,EAAEA,CAAC,CAAE,CAAE,CAAE,GACvF,CAKAR,EAAO,QAAUM,IC3CjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "float64ToFloat32", "isnanf", "isInfinitef", "PINF", "sqrtf", "hypotf", "x", "y", "tmp", "main"]
}
